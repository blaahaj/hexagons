html,
body {
  background: #222;
  margin: 0;
  height: 100%;
  overflow: hidden;
}

#hexagon-container {
  --hexagon-spacing: 1.04;
  --hex-short-radius: 3.3em;
  --hex-long-radius: calc(var(--hex-short-radius) / sin(60deg));
  --duration: 3s;
  position: absolute;

  /* Ensure we have some hexagons off-screen, so that transitions
  ** which move hexagons don't visibly hit the edge of the animatable
  ** space. */
  /* Normally negative; set to positive for debugging */
  --margin-radii: -4;
  border: 1px solid red;

  left: calc(var(--hex-long-radius) * var(--margin-radii));
  top: calc(var(--hex-short-radius) * var(--margin-radii));
  bottom: calc(var(--hex-short-radius) * (var(--margin-radii) + 1));
  right: calc(var(--hex-long-radius) * (var(--margin-radii) + 2));
}

.hexagon-cell {
  position: absolute;
  top: calc(
    var(--hexagon-spacing) * (2 * var(--cell-y) + var(--cell-x-mod-2)) *
      var(--hex-short-radius)
  );
  left: calc(
    var(--hexagon-spacing) * var(--cell-x) * var(--hex-long-radius) * 1.5
  );
}

.hexagon-cell.no-animate {
  transition-property: none;
}

.hexagon {
  background: gray;
  opacity: 1;
  clip-path: polygon(0 50%, 25% 100%, 75% 100%, 100% 50%, 75% 0, 25% 0);
  width: calc(var(--hex-long-radius) * 2);
  height: calc(var(--hex-short-radius) * 2);
}

.hexagon--content {
  text-align: center;
  line-height: 0;
  color: #fff;
  position: relative;
}

.hexagon--content-top {
  font-size: calc(var(--hex-short-radius) * 0.23);
  top: 18%;
  font-weight: 400;
}

.hexagon--content-middle {
  font-size: calc(var(--hex-short-radius) * 0.83);
  top: 50%;
  font-weight: 700;
}

.hexagon--content-bottom {
  font-size: calc(var(--hex-short-radius) * 0.19);
  top: 82%;
  font-weight: 400;
}

.hexagon-cell {
  transition-property: top left;
  transition-duration: var(--duration);
}

.hexagon,
.hexagon--content,
.rx,
.ry,
.rz {
  transition-property: all;
  transition-duration: var(--duration);
}

.hexagon--content > span {
  position: absolute;
  left: 0;
  width: 100%;
  transition-property: opacity;
  transition-duration: var(--duration);
}
